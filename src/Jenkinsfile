pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token')
        PYTHON = 'python3.10'
        VENV_PATH = '/tmp/venv'
        MLFLOW_PORT = '5003'  // Port pour MLflow UI
    }

    stages {
        // Étape 1: Checkout du code
        stage('Checkout') {
            steps {
                git branch: 'main', url: "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/tasnimkh24/Ml_Project.git"
            }
        }

        // Étape 2: Installation des dépendances
        stage('Install Dependencies') {
            steps {
                sh '''
                    ${PYTHON} -m venv ${VENV_PATH}
                    . ${VENV_PATH}/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip install pytest pytest-cov bandit safety flake8 black pylint isort mlflow
                '''
            }
        }

        // Étape 3: Tests de sécurité (Bandit et Safety)
        stage('Security Tests') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        bandit -r src/ -o bandit_report.txt
                        safety check --full-report > safety_report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit_report.txt, safety_report.txt', allowEmptyArchive: true
                }
            }
        }

        // Étape 4: Tests de qualité de code (flake8, black, pylint, isort)
        stage('Code Quality') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        flake8 src/ --config=.flake8 --output-file=flake8_report.txt
                        black --check src/ --diff > black_report.txt
                        pylint src/ --output=pylint_report.txt
                        isort --check-only src/ --diff > isort_report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'flake8_report.txt, black_report.txt, pylint_report.txt, isort_report.txt', allowEmptyArchive: true
                }
            }
        }

        // Étape 5: Préparation des données
        stage('Prepare Data') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --prepare
                '''
            }
        }

        // Étape 6: Entraînement du modèle
        stage('Train Model') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --train
                '''
            }
        }

        // Étape 7: Évaluation du modèle
        stage('Evaluate Model') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --evaluate
                '''
            }
        }

        // Étape 8: Démarrer MLflow UI
        stage('Start MLflow UI') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    mlflow ui --host 0.0.0.0 --port ${MLFLOW_PORT} &
                '''
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed!'
        }
        success {
            echo '✅ Pipeline succeeded!'
        }
        unstable {
            echo '⚠️ Pipeline unstable! Check security or quality issues.'
        }
    }
}