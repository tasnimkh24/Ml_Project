pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token')
        PYTHON = 'python3.10'
        VENV_PATH = '/tmp/venv'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/tasnimkh24/Ml_Project.git"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '${PYTHON} -m venv ${VENV_PATH}'
                sh '''
                    . ${VENV_PATH}/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip install pytest pytest-cov  # Installer pytest et pytest-cov
                '''
            }
        }

        stage('Security Tests') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        pip install "safety<2.0.0"  # Utiliser une version compatible de safety
                        bandit -r src/ -o bandit_report.txt
                        safety check > safety_report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit_report.txt, safety_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Code Quality') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        pip install flake8 black pylint isort
                        flake8 src/ --config=.flake8
                        black --check src/
                        pylint src/
                        isort --check-only src/
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'flake8_report.txt, black_report.txt, pylint_report.txt, isort_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Unit Tests') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        pytest --cov=src test/  # Exécuter les tests dans le dossier tests/
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pytest_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Prepare Data') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --prepare
                '''
            }
        }

        stage('Train Model') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --train
                '''
            }
        }

        stage('Evaluate Model') {
            steps {
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --evaluate
                '''
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed!'
        }
        success {
            echo '✅ Pipeline succeeded!'
        }
    }
}
