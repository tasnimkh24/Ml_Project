pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token') // Utilise l'ID des identifiants GitHub
        PYTHON = 'python3.10' // Spécifie la version de Python
        VENV_PATH = '/tmp/venv' // Dossier accessible pour l'environnement virtuel
    }

    stages {
        stage('Checkout') {
            steps {
                // Cloner le dépôt en utilisant le token GitHub
                git branch: 'main', url: "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/tasnimkh24/Ml_Project.git"
            }
        }

        stage('Install Dependencies') {
            steps {
                // Créer un environnement virtuel Python dans un dossier accessible
                sh '${PYTHON} -m venv ${VENV_PATH}'
                // Activer l'environnement virtuel et installer les dépendances
                sh '''
                    . ${VENV_PATH}/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Security Tests') {
            steps {
                // Activer l'environnement virtuel et exécuter Bandit pour les tests de sécurité
                sh '''
                    . ${VENV_PATH}/bin/activate
                    pip install bandit safety
                    bandit -r src/ -o bandit_report.txt
                    safety check > safety_report.txt
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit_report.txt, safety_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Code Quality') {
            steps {
                // Activer l'environnement virtuel et exécuter les outils de qualité de code
                sh '''
                    . ${VENV_PATH}/bin/activate
                    pip install flake8 black pylint isort
                    flake8 src/ > flake8_report.txt
                    black --check src/ > black_report.txt
                    pylint src/ > pylint_report.txt
                    isort --check-only src/ > isort_report.txt
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'flake8_report.txt, black_report.txt, pylint_report.txt, isort_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Unit Tests') {
            steps {
                // Activer l'environnement virtuel et exécuter les tests unitaires avec pytest
                sh '''
                    . ${VENV_PATH}/bin/activate
                    pip install pytest pytest-cov
                    pytest --cov=src tests/ > pytest_report.txt
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'pytest_report.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Prepare Data') {
            steps {
                // Activer l'environnement virtuel et exécuter le script de préparation des données
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --prepare
                '''
            }
        }

        stage('Train Model') {
            steps {
                // Activer l'environnement virtuel et exécuter le script d'entraînement du modèle
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --train
                '''
            }
        }

        stage('Evaluate Model') {
            steps {
                // Activer l'environnement virtuel et exécuter le script d'évaluation du modèle
                sh '''
                    . ${VENV_PATH}/bin/activate
                    ${PYTHON} src/main.py --train-data data/train.csv --test data/test.csv --evaluate
                '''
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed!'
            // Envoyer une notification Slack ou e-mail en cas d'échec
        }
        success {
            echo '✅ Pipeline succeeded!'
            // Envoyer une notification Slack ou e-mail en cas de succès
        }
    }
}
